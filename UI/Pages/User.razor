@page "/user"
@page "/user/{id:int}"

@inject HttpClient Http;
@inject NavigationManager NavigationManager;
@inject ILogger<User> Logger

<EditForm Model=@user OnSubmit=@FormSubmitted>
    <DataAnnotationsValidator />    
    
    <h3>User</h3>

    <div class="container-fluid">
        <div class="form-group row mb-1">
            <label class="col-sm-3">Name</label>
            <div class="col-sm-9">
                <InputText class="form-control" @bind-Value="@user.Name"></InputText>
                <ValidationMessage For="@(() => user.Name)" />
            </div>
        </div>

        <div class="form-group row mb-1">
            <label class="col-sm-3">Last Name</label>
            <div class="col-sm-9">
                <InputText class="form-control" @bind-Value="@user.LastName"></InputText>
                <ValidationMessage For="@(() => user.LastName)" />
            </div>
        </div>
        <div class="form-group row mb-1">
            <label class="col-sm-3">Age</label>
            <div class="col-sm-9">
                <input class="form-control" @bind="@user.Age" />
                <ValidationMessage For="@(() => user.Age)" />
            </div>
        </div>
        <div class="form-group row mb-1">
            <label class="col-sm-3">Genre</label>
            <div class="col-sm-9">
                <InputSelect  class="form-control" id="genre" @bind-Value="@user.GenreId">
                    @foreach (var genre in genres)
                    { 
                        <option value="@genre.Id">@genre.Name</option>
                    }
                </InputSelect>
            </div>
        </div>

        <div class="form-group row mb-1">
            <div class="col-sm-12">
                <button class="btn btn-outline-primary" @onclick="Return">Back</button>
                <button class="btn btn-primary">Save</button>
            </div>
        </div>
    </div>

</EditForm>

@code {

    private readonly string urlUsers = "/api/users";
    private readonly string urlGenres = "/api/genres";

    [Parameter]
    public int Id { get; set; }

    public bool IsNew { get { return Id == 0; } }

    UserCreateDto user = new UserCreateDto();
    List<GenreReadDto> genres = new List<GenreReadDto>();

    protected override async Task OnInitializedAsync()
    {
        genres = await Http.GetFromJsonAsync<List<GenreReadDto>>(urlGenres);

        if (!IsNew)
        {
            user = await Http.GetFromJsonAsync<UserReadDto>($"{urlUsers}/{Id}");            
        }
    }

    async Task FormSubmitted(EditContext editContext)
    {
        bool formIsValid = editContext.Validate();
        if (formIsValid)
        {
            await SaveOrEdit();
        }
        else
        {
            Logger.LogError($"Error validation");
        }
    }

    private async Task SaveOrEdit()
    {
        HttpResponseMessage response;

        if (IsNew)
        {
            response = await Http.PostAsJsonAsync(urlUsers, user);
        }
        else
        {
            response = await Http.PutAsJsonAsync($"{urlUsers}/{Id}", user);
        }

        if (!response.IsSuccessStatusCode)
        {
            var responseString = await response.Content.ReadAsStringAsync();
            Logger.LogError($"Error calling server {responseString}");
        }

        Return();
    }

    private void Return() => NavigationManager.NavigateTo("/");

}
